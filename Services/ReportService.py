from Services.DatabaseService import DatabaseService
from Services.B24Service import B24Service
from telegram import Update
from telegram.ext import ContextTypes

class ReportService:
    def __init__(self):
        self.db = DatabaseService()
        self.b24 = B24Service()

    async def tracker_all_timer(self, user_id, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–¢—Ä–µ–∫–∞–µ—Ç –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        state = self.db.get_today_timers(user_id)
        user_b24_id = self.db.getUser(user_id)['b24_id']

        if not state:
            return "–ù–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤"

        if not user_b24_id:
            return "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –≤ –ë–∏—Ç—Ä–∏–∫—Å"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
        context.user_data['pending_timers'] = list(state.values())
        context.user_data['current_timer_index'] = 0
        context.user_data['user_b24_id'] = user_b24_id
        context.user_data['tracked_timers'] = []
        context.user_data['error_timers'] = []

        # –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥
        await self._process_next_timer(update, context)
        return "DIALOG_STARTED"

    async def _process_next_timer(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —Ç–∞–π–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏"""
        pending_timers = context.user_data['pending_timers']
        current_index = context.user_data['current_timer_index']
        
        if current_index >= len(pending_timers):
            # –í—Å–µ —Ç–∞–π–º–µ—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
            await self._finish_tracking(update, context)
            return
        
        timer = pending_timers[current_index]
        context.user_data['current_timer'] = timer
        
        if timer['task_id'] == 0:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º ID –∑–∞–¥–∞—á–∏
            await update.message.reply_text(
                f"‚ùì –£ —Ç–∞–π–º–µ—Ä–∞ \"{timer['name']}\" –Ω–µ —É–∫–∞–∑–∞–Ω ID –∑–∞–¥–∞—á–∏.\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏:"
            )
            context.user_data['awaiting_task_id'] = True
        elif not timer.get('comment'):
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            await update.message.reply_text(
                f"‚ùì –£ —Ç–∞–π–º–µ—Ä–∞ \"{timer['name']}\" (ID: {timer['task_id']}) –Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:"
            )
            context.user_data['awaiting_comment'] = True
        else:
            # –í—Å–µ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ë–∏—Ç—Ä–∏–∫—Å
            await self._send_to_bitrix(update, context, timer)

    async def _send_to_bitrix(self, update: Update, context: ContextTypes.DEFAULT_TYPE, timer=None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–∞–π–º–µ—Ä –≤ –ë–∏—Ç—Ä–∏–∫—Å"""
        if timer is None:
            timer = context.user_data['current_timer']
        
        user_b24_id = context.user_data['user_b24_id']
        
        try:
            success = self.b24.addTime(timer['task_id'], user_b24_id, timer['total_seconds'], timer.get('comment', ''))
            if success:
                context.user_data['tracked_timers'].append(timer['name'])
                await update.message.reply_text(f"‚úÖ –¢–∞–π–º–µ—Ä \"{timer['name']}\" —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ë–∏—Ç—Ä–∏–∫—Å")
            else:
                context.user_data['error_timers'].append(timer['name'])
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–∞–π–º–µ—Ä–∞ \"{timer['name']}\"")
        except Exception as e:
            context.user_data['error_timers'].append(timer['name'])
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–∞–π–º–µ—Ä–∞ \"{timer['name']}\": {str(e)}")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç–∞–π–º–µ—Ä—É
        context.user_data['current_timer_index'] += 1
        await self._process_next_timer(update, context)

    async def _finish_tracking(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ç—Ä–µ–∫–∏–Ω–≥–∞ –∏ –≤—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥"""
        tracked = context.user_data['tracked_timers']
        errors = context.user_data['error_timers']
        
        result_message = ["üìä **–ò—Ç–æ–≥ —Ç—Ä–µ–∫–∏–Ω–≥–∞:**"]
        
        if tracked:
            result_message.append("‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã:")
            for name in tracked:
                result_message.append(f"  ‚Ä¢ {name}")
        
        if errors:
            result_message.append("‚ùå –û—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏:")
            for name in errors:
                result_message.append(f"  ‚Ä¢ {name}")
        
        if not tracked and not errors:
            result_message.append("‚ÑπÔ∏è –ù–µ—Ç —Ç–∞–π–º–µ—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
        
        await update.message.reply_text(
            "\n".join(result_message),
            reply_markup=self.get_reply_keyboard(update.effective_user.id)
        )
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        for key in ['pending_timers', 'current_timer_index', 'user_b24_id', 
                    'tracked_timers', 'error_timers', 'current_timer',
                    'awaiting_task_id', 'awaiting_comment']:
            context.user_data.pop(key, None)

    def get_reply_keyboard(self, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º TimerService –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
        from Services.TimerService import TimerService
        return TimerService().get_reply_keyboard(user_id)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async def handle_task_id_response(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç —Å ID –∑–∞–¥–∞—á–∏"""
        user_id = update.effective_user.id
        try:
            task_id = int(update.message.text)
            timer = self.db.get_timer_by_name(user_id, context.user_data['current_timer']['name'])
            if not timer:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —Ç–∞–π–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return
            timer['task_id'] = task_id
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            self.db.update_timer_task_id(user_id, timer['name'], task_id)
            
            await update.message.reply_text(f"‚úÖ ID –∑–∞–¥–∞—á–∏ –¥–ª—è \"{timer['name']}\" —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {task_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            if not timer.get('comment'):
                await update.message.reply_text(
                    f"‚ùì –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è —Ç–∞–π–º–µ—Ä–∞ \"{timer['name']}\":"
                )
                context.user_data['awaiting_comment'] = True
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ë–∏—Ç—Ä–∏–∫—Å
                await self._send_to_bitrix(update, context, timer)
                
        except ValueError:
            await update.message.reply_text("‚ùå ID –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")

    async def handle_comment_response(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º"""
        user_id = update.effective_user.id
        comment = update.message.text
        timer = self.db.get_timer_by_name(user_id, context.user_data['current_timer']['name'])
        if not timer:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —Ç–∞–π–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
        timer['comment'] = comment
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        self.db.update_timer_comment(user_id, timer['name'], comment)
        
        await update.message.reply_text(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è \"{timer['name']}\" —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ë–∏—Ç—Ä–∏–∫—Å
        await self._send_to_bitrix(update, context, timer)