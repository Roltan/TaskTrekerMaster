from datetime import datetime
from Services.DatabaseService import DatabaseService

class TimerService:
    def __init__(self):
        self.db = DatabaseService()
        # –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_states = {}  # {user_id: {'time_tracker': {}, 'active_sessions': {}}}
    
    def _get_user_state(self, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.user_states:
            self.user_states[user_id] = {
                'time_tracker': {},
                'active_sessions': {}
            }
            self._sync_memory_with_db(user_id)
        return self.user_states[user_id]
    
    def _sync_memory_with_db(self, user_id):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        state = self._get_user_state(user_id)
        state['time_tracker'] = self.db.get_today_timers(user_id)
        state['active_sessions'] = self.db.get_active_sessions(user_id)
    
    def get_reply_keyboard(self, user_id):
        from telegram import KeyboardButton, ReplyKeyboardMarkup
        
        buttons = []
        stats_button = [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")]
        
        # –í—Å–µ–≥–¥–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –ë–î –ø–µ—Ä–µ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        self._sync_memory_with_db(user_id)
        state = self._get_user_state(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–π–º–µ—Ä –ø–æ –Ω–∞–ª–∏—á–∏—é –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
        active_timer_exists = bool(state['active_sessions'])
        
        if active_timer_exists:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞
            for timer_name in state['active_sessions'].keys():
                buttons.append([KeyboardButton(f"‚èπÔ∏è –°—Ç–æ–ø {timer_name}")])
                break  # –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–π–º–µ—Ä
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ä—Ç–∞ –¥–ª—è –≤—Å–µ—Ö —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö —Ç–∞–π–º–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            for name in state['time_tracker']:
                buttons.append([KeyboardButton(f"‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç {name}")])
        
        return ReplyKeyboardMarkup(buttons + [stats_button], resize_keyboard=True)
    
    def start_timer(self, user_id, timer_name):
        """–ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤ –ë–î"""
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –ë–î –ø–µ—Ä–µ–¥ –æ–ø–µ—Ä–∞—Ü–∏–µ–π
        self._sync_memory_with_db(user_id)
        state = self._get_user_state(user_id)
        
        if timer_name not in state['time_tracker']:
            return f"–¢–∞–π–º–µ—Ä '{timer_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º —Å–µ—Å—Å–∏—è–º
        if timer_name in state['active_sessions']:
            return f"–¢–∞–π–º–µ—Ä '{timer_name}' —É–∂–µ –∑–∞–ø—É—â–µ–Ω!"
        
        # –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
        now = datetime.now()
        start_time_str = now.strftime("%Y-%m-%d %H:%M:%S")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –≤ –ë–î
        session_id = self.db.start_timer_session(user_id, timer_name, start_time_str)
        state['active_sessions'][timer_name] = session_id
        
        return f"–¢–∞–π–º–µ—Ä '{timer_name}' –∑–∞–ø—É—â–µ–Ω!"
    
    def stop_timer(self, user_id, timer_name):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î"""
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –ë–î –ø–µ—Ä–µ–¥ –æ–ø–µ—Ä–∞—Ü–∏–µ–π
        self._sync_memory_with_db(user_id)
        state = self._get_user_state(user_id)
        
        if timer_name not in state['time_tracker']:
            return f"–¢–∞–π–º–µ—Ä '{timer_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        if timer_name not in state['active_sessions']:
            return f"–¢–∞–π–º–µ—Ä '{timer_name}' –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω!"
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
        now = datetime.now()
        session_id = state['active_sessions'][timer_name]
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–µ—Å—Å–∏–∏ –∏–∑ –ë–î
        start_time = self.db.get_session_start_time(session_id)
        if not start_time:
            return f"–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–µ—Å—Å–∏–∏ –¥–ª—è —Ç–∞–π–º–µ—Ä–∞ '{timer_name}'"
        
        last_time = datetime.strptime(start_time, "%Y-%m-%d %H:%M:%S")
        delta = now - last_time
        duration_seconds = delta.total_seconds()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –≤ –ë–î
        self.db.add_time_to_timer(user_id, timer_name, duration_seconds)
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é –≤ –ë–î
        end_time_str = now.strftime("%Y-%m-%d %H:%M:%S")
        self.db.stop_timer_session(session_id, end_time_str, duration_seconds)
        del state['active_sessions'][timer_name]
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –¥–ª—è –æ—Ç—á–µ—Ç–∞
        timer_data = self.db.get_timer(user_id, timer_name)
        total_seconds = timer_data['total_seconds'] if timer_data else 0
        hours = int(total_seconds // 3600)
        minutes = int((total_seconds % 3600) // 60)
        
        return (
            f"–¢–∞–π–º–µ—Ä '{timer_name}' –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n"
            f"–°–µ—Å—Å–∏—è: {duration_seconds/60:.1f} –º–∏–Ω—É—Ç\n"
            f"–í—Å–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {hours}h {minutes}m"
        )
    
    def create_timer(self, user_id, key, task_id, type):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –ë–î"""
        success = self.db.create_timer(user_id, key, task_id, type)
        if success:
            return f"–¢–∞–π–º–µ—Ä '{key}' –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É!"
        else:
            return f"–¢–∞–π–º–µ—Ä '{key}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!"
    
    def add_minutes(self, user_id, timer_name, minutes):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —á–µ—Ä–µ–∑ –ë–î"""
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥ –æ–ø–µ—Ä–∞—Ü–∏–µ–π
        self._sync_memory_with_db(user_id)
        state = self._get_user_state(user_id)
        
        if timer_name not in state['time_tracker']:
            return f"–¢–∞–π–º–µ—Ä '{timer_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ –ë–î
        seconds_to_add = minutes * 60
        self.db.add_time_to_timer(user_id, timer_name, seconds_to_add)
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        self._sync_memory_with_db(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
        timer_data = self.db.get_timer(user_id, timer_name)
        total_seconds = timer_data['total_seconds'] if timer_data else 0
        hours = int(total_seconds // 3600)
        minutes = int((total_seconds % 3600) // 60)
        
        return (
            f"–ö —Ç–∞–π–º–µ—Ä—É '{timer_name}' –¥–æ–±–∞–≤–ª–µ–Ω–æ {minutes} –º–∏–Ω—É—Ç\n"
            f"–í—Å–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {hours}h {minutes}m"
        )
    
    def delete_timer(self, user_id, timer_name):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –∏–∑ –ë–î"""
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥ –æ–ø–µ—Ä–∞—Ü–∏–µ–π
        self._sync_memory_with_db(user_id)
        state = self._get_user_state(user_id)
        
        if timer_name not in state['time_tracker']:
            return f"–¢–∞–π–º–µ—Ä '{timer_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        # –ï—Å–ª–∏ —Ç–∞–π–º–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ
        if timer_name in state['active_sessions']:
            self.stop_timer(user_id, timer_name)
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î
        self.db.delete_timer(user_id, timer_name)
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        self._sync_memory_with_db(user_id)
        
        return f"–¢–∞–π–º–µ—Ä '{timer_name}' —É–¥–∞–ª–µ–Ω!"
    
    def get_statistics(self, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º —Ç–∞–π–º–µ—Ä–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self._sync_memory_with_db(user_id)
        state = self._get_user_state(user_id)
        
        if not state['time_tracker']:
            return "–ù–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤"
        
        stats = []
        total_day_seconds = 0

        for key in state['time_tracker']:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
            timer_data = self.db.get_timer(user_id, key)
            total_seconds = timer_data['total_seconds'] if timer_data else 0
            total_day_seconds += total_seconds
            
            total_hours = total_seconds / 3600
            hours = int(total_hours)
            minutes = int((total_hours - hours) * 60)
            
            # –°—Ç–∞—Ç—É—Å –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º —Å–µ—Å—Å–∏—è–º
            status = "‚è≥" if key in state['active_sessions'] else "‚èπ"
            stats.append(f"{status} [{key}] {total_hours:.2f}h ({hours}h {minutes}m)")
        
        # –ü–æ–¥—Å—á—ë—Ç –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞ –¥–µ–Ω—å
        total_day_hours = total_day_seconds / 3600
        total_day_hours_int = int(total_day_hours)
        total_day_minutes = int((total_day_hours - total_day_hours_int) * 60)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        result = [
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:",
            *stats,
            "",
            f"üìà **–í—Å–µ–≥–æ –∑–∞ –¥–µ–Ω—å: {total_day_hours:.2f}h ({total_day_hours_int}h {total_day_minutes}m)**"
        ]
        
        return "\n".join(result)
    
    def clear_all_timers(self, user_id):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ç–∞–π–º–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ä—Ç)"""
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã
        self._sync_memory_with_db(user_id)
        state = self._get_user_state(user_id)
        
        for timer_name in list(state['active_sessions'].keys()):
            self.stop_timer(user_id, timer_name)
        
        return "–í—Å–µ —Ç–∞–π–º–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏ –∫–Ω–æ–ø–∫–∏ –æ—á–∏—â–µ–Ω—ã"
    
    def get_detailed_statistics(self, user_id, timer_name):
        """–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ç–∞–π–º–µ—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self._sync_memory_with_db(user_id)
        state = self._get_user_state(user_id)
        
        if timer_name not in state['time_tracker']:
            return f"–¢–∞–π–º–µ—Ä '{timer_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        timer_data = self.db.get_timer(user_id, timer_name)
        if not timer_data:
            return f"–î–∞–Ω–Ω—ã–µ —Ç–∞–π–º–µ—Ä–∞ '{timer_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        total_seconds = timer_data['total_seconds']
        total_hours = total_seconds / 3600
        hours = int(total_hours)
        minutes = int((total_hours - hours) * 60)
        
        status = "‚è≥ –ó–∞–ø—É—â–µ–Ω" if timer_name in state['active_sessions'] else "‚èπ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        
        return (
            f"üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ '{timer_name}':\n"
            f"–í—Å–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {total_hours:.2f}h ({hours}h {minutes}m)\n"
            f"–°—Ç–∞—Ç—É—Å: {status}"
        )