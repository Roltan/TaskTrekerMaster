from datetime import datetime
from Services.B24Service import B24Service
from Model.User import User
from Model.Timer import Timer
from Model.Session import Session

class TimerService:
    def __init__(self):
        self.b24 = B24Service()
        self.user_model = User()
        self.timer_model = Timer()
        self.session_model = Session()
    
    def get_reply_keyboard(self, user_id):
        from telegram import KeyboardButton, ReplyKeyboardMarkup
        
        buttons = []
        stats_button = [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")]
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î
        active_sessions = self.session_model.get_active_sessions(user_id)
        
        if bool(active_sessions):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞
            for session in active_sessions:
                buttons.append([KeyboardButton(f"‚èπÔ∏è –°—Ç–æ–ø {session['timer_name']}")])
                break  # –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–π–º–µ—Ä
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ä—Ç–∞ –¥–ª—è –≤—Å–µ—Ö —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö —Ç–∞–π–º–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            today_timers = self.timer_model.get_today_timers(user_id)
            for timer in today_timers:
                buttons.append([KeyboardButton(f"‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç {timer['name']}")])
            buttons.append([KeyboardButton(f"–û—Ç—á—ë—Ç")])
        
        return ReplyKeyboardMarkup(buttons + [stats_button], resize_keyboard=True)
    
    def start_timer(self, user_id, timer_name):
        """–ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤ –ë–î"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
        timer = self.timer_model.get_timer(user_id, timer_name)
        if not timer:
            return f"–¢–∞–π–º–µ—Ä '{timer_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞
        active_sessions = self.session_model.get_active_sessions(user_id)
        for session in active_sessions:
            if session['timer_name'] == timer_name:
                return f"–¢–∞–π–º–µ—Ä '{timer_name}' —É–∂–µ –∑–∞–ø—É—â–µ–Ω!"
        
        # –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
        now = datetime.now()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –≤ –ë–î
        session_id = self.session_model.start_session(user_id, timer_name, now)
        if not session_id:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–∞–π–º–µ—Ä–∞ '{timer_name}'"
        
        return f"–¢–∞–π–º–µ—Ä '{timer_name}' –∑–∞–ø—É—â–µ–Ω!"
    
    def stop_timer(self, user_id, timer_name):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
        timer = self.timer_model.get_timer(user_id, timer_name)
        if not timer:
            return f"–¢–∞–π–º–µ—Ä '{timer_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞
        active_sessions = self.session_model.get_active_sessions(user_id)
        session_id = None
        for session in active_sessions:
            if session['timer_name'] == timer_name:
                session_id = session['id']
                break
        
        if not session_id:
            return f"–¢–∞–π–º–µ—Ä '{timer_name}' –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω!"
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
        now = datetime.now()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–µ—Å—Å–∏–∏ –∏–∑ –ë–î
        session_data = self.session_model.read_one({"id": session_id})
        if not session_data:
            return f"–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è —Ç–∞–π–º–µ—Ä–∞ '{timer_name}'"
        
        start_time = datetime.fromisoformat(session_data['start_time'].replace('Z', '+00:00'))
        delta = now - start_time
        duration_seconds = delta.total_seconds()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –≤ –ë–î
        self.timer_model.add_time_to_timer(user_id, timer_name, duration_seconds)
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é –≤ –ë–î
        success = self.session_model.stop_session(session_id, now, duration_seconds)
        if not success:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç–∞–π–º–µ—Ä–∞ '{timer_name}'"
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –¥–ª—è –æ—Ç—á–µ—Ç–∞
        updated_timer = self.timer_model.get_timer(user_id, timer_name)
        total_seconds = updated_timer['total_seconds'] if updated_timer else 0
        hours = int(total_seconds // 3600)
        minutes = int((total_seconds % 3600) // 60)
        
        return (
            f"–¢–∞–π–º–µ—Ä '{timer_name}' –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n"
            f"–°–µ—Å—Å–∏—è: {duration_seconds/60:.1f} –º–∏–Ω—É—Ç\n"
            f"–í—Å–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {hours}h {minutes}m"
        )
    
    def create_timer(self, user_id, key, task_id, timer_type):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª—å"""
        success = self.timer_model.create_timer(user_id, key, task_id, timer_type)
        if success:
            return f"–¢–∞–π–º–µ—Ä '{key}' –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É!"
        else:
            return f"–¢–∞–π–º–µ—Ä '{key}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!"
    
    def add_minutes(self, user_id, timer_name, minutes):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª—å"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
        timer = self.timer_model.get_timer(user_id, timer_name)
        if not timer:
            return f"–¢–∞–π–º–µ—Ä '{timer_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª—å
        seconds_to_add = minutes * 60
        self.timer_model.add_time_to_timer(user_id, timer_name, seconds_to_add)
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
        updated_timer = self.timer_model.get_timer(user_id, timer_name)
        total_seconds = updated_timer['total_seconds'] if updated_timer else 0
        hours = int(total_seconds // 3600)
        minutes_total = int((total_seconds % 3600) // 60)
        
        return (
            f"–ö —Ç–∞–π–º–µ—Ä—É '{timer_name}' –¥–æ–±–∞–≤–ª–µ–Ω–æ {minutes} –º–∏–Ω—É—Ç\n"
            f"–í—Å–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {hours}h {minutes_total}m"
        )
    
    def delete_timer(self, user_id, timer_name):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –∏–∑ –ë–î"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
        timer = self.timer_model.get_timer(user_id, timer_name)
        if not timer:
            return f"–¢–∞–π–º–µ—Ä '{timer_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        # –ï—Å–ª–∏ —Ç–∞–π–º–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ
        active_sessions = self.session_model.get_active_sessions(user_id)
        for session in active_sessions:
            if session['timer_name'] == timer_name:
                self.stop_timer(user_id, timer_name)
                break
        
        # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏–∏ —Ç–∞–π–º–µ—Ä–∞
        self.session_model.delete({"user_id": user_id, "timer_name": timer_name})
        
        # –£–¥–∞–ª—è–µ–º —Å–∞–º —Ç–∞–π–º–µ—Ä
        self.timer_model.delete({"user_id": user_id, "name": timer_name})
        
        return f"–¢–∞–π–º–µ—Ä '{timer_name}' —É–¥–∞–ª–µ–Ω!"
    
    def get_statistics(self, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º —Ç–∞–π–º–µ—Ä–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        today_timers = self.timer_model.get_today_timers(user_id)
        
        if not today_timers:
            return "–ù–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤"
        
        stats = []
        total_day_seconds = 0
        active_sessions = self.session_model.get_active_sessions(user_id)
        
        # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        active_timer_names = {session['timer_name'] for session in active_sessions}

        for timer in today_timers:
            total_seconds = timer['total_seconds']
            total_day_seconds += total_seconds
            
            total_hours = total_seconds / 3600
            hours = int(total_hours)
            minutes = int((total_hours - hours) * 60)
            
            # –°—Ç–∞—Ç—É—Å –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º —Å–µ—Å—Å–∏—è–º
            status = "‚è≥" if timer['name'] in active_timer_names else "‚èπ"
            stats.append(f"{status} [{timer['name']}] {total_hours:.2f}h ({hours}h {minutes}m)")
        
        # –ü–æ–¥—Å—á—ë—Ç –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞ –¥–µ–Ω—å
        total_day_hours = total_day_seconds / 3600
        total_day_hours_int = int(total_day_hours)
        total_day_minutes = int((total_day_hours - total_day_hours_int) * 60)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        result = [
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:",
            *stats,
            "",
            f"üìà **–í—Å–µ–≥–æ –∑–∞ –¥–µ–Ω—å: {total_day_hours:.2f}h ({total_day_hours_int}h {total_day_minutes}m)**"
        ]
        
        return "\n".join(result)

    def clear_all_timers(self, user_id):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ç–∞–π–º–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ä—Ç)"""
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã
        active_sessions = self.session_model.get_active_sessions(user_id)
        
        for session in active_sessions:
            self.stop_timer(user_id, session['timer_name'])
        
        return "–í—Å–µ —Ç–∞–π–º–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏ –∫–Ω–æ–ø–∫–∏ –æ—á–∏—â–µ–Ω—ã"