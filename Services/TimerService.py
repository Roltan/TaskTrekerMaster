from datetime import datetime, timedelta

class TimerService:
    def __init__(self):
        self.time_tracker = {}
        self.active_timer = None
    
    def get_reply_keyboard(self):
        from telegram import KeyboardButton, ReplyKeyboardMarkup
        
        buttons = []
        stats_button = [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–π–º–µ—Ä
        active_timer_exists = any(timer["time_mark"] is not None for timer in self.time_tracker.values())
        
        if active_timer_exists:
            # –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Ç–∞–π–º–µ—Ä–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ
            for name, data in self.time_tracker.items():
                if data["time_mark"] is not None:
                    buttons.append([KeyboardButton(f"‚èπÔ∏è –°—Ç–æ–ø {name}")])
                    break
        else:
            # –†–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ä—Ç–∞ –¥–ª—è –≤—Å–µ—Ö —Ç–∞–π–º–µ—Ä–æ–≤
            for name in self.time_tracker:
                buttons.append([KeyboardButton(f"‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç {name}")])
        
        return ReplyKeyboardMarkup(buttons + [stats_button], resize_keyboard=True)
    
    def create_timer(self, key):
        if key not in self.time_tracker:
            self.time_tracker[key] = {
                "time_mark": None,
                "full_time": 0
            }
            return f"–¢–∞–π–º–µ—Ä '{key}' –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É!"
        else:
            return f"–¢–∞–π–º–µ—Ä '{key}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!"
    
    def start_timer(self, timer_name):
        if timer_name not in self.time_tracker:
            return f"–¢–∞–π–º–µ—Ä '{timer_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        if self.time_tracker[timer_name]["time_mark"] is not None:
            return f"–¢–∞–π–º–µ—Ä '{timer_name}' —É–∂–µ –∑–∞–ø—É—â–µ–Ω!"
        
        # –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
        self.time_tracker[timer_name]["time_mark"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        self.active_timer = timer_name
        return f"–¢–∞–π–º–µ—Ä '{timer_name}' –∑–∞–ø—É—â–µ–Ω!"
    
    def stop_timer(self, timer_name):
        if timer_name not in self.time_tracker:
            return f"–¢–∞–π–º–µ—Ä '{timer_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        if self.time_tracker[timer_name]["time_mark"] is None:
            return f"–¢–∞–π–º–µ—Ä '{timer_name}' –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω!"
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞
        now = datetime.now()
        last_time = datetime.strptime(self.time_tracker[timer_name]["time_mark"], "%Y-%m-%d %H:%M:%S")
        delta = now - last_time
        self.time_tracker[timer_name]["full_time"] += delta.total_seconds()
        self.time_tracker[timer_name]["time_mark"] = None
        self.active_timer = None
        
        total_seconds = self.time_tracker[timer_name]["full_time"]
        hours = int(total_seconds // 3600)
        minutes = int((total_seconds % 3600) // 60)
        
        return (
            f"–¢–∞–π–º–µ—Ä '{timer_name}' –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n"
            f"–í—Å–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {hours}h {minutes}m"
        )
    
    def add_minutes(self, timer_name, minutes):
        if timer_name not in self.time_tracker:
            return f"–¢–∞–π–º–µ—Ä '{timer_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        # –ü—Ä–∏–±–∞–≤–ª—è–µ–º –º–∏–Ω—É—Ç—ã (–ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–µ–∫—É–Ω–¥—ã)
        self.time_tracker[timer_name]["full_time"] += minutes * 60
        
        total_seconds = self.time_tracker[timer_name]["full_time"]
        hours = int(total_seconds // 3600)
        minutes = int((total_seconds % 3600) // 60)
        
        return (
            f"–ö —Ç–∞–π–º–µ—Ä—É '{timer_name}' –¥–æ–±–∞–≤–ª–µ–Ω–æ {minutes} –º–∏–Ω—É—Ç\n"
            f"–í—Å–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {hours}h {minutes}m"
        )
    
    def get_statistics(self):
        if not self.time_tracker:
            return "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤"
        
        stats = []
        for key, data in self.time_tracker.items():
            total_hours = data["full_time"] / 3600
            hours = int(total_hours)
            minutes = int((total_hours - hours) * 60)
            status = "‚è≥" if data["time_mark"] else "‚èπ"
            stats.append(f"{status} [{key}] {total_hours:.2f}h ({hours}h {minutes}m)")
        
        return "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n" + "\n".join(stats)
    
    def has_active_timer(self):
        return any(timer["time_mark"] is not None for timer in self.time_tracker.values())