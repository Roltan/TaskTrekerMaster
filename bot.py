import os
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from Services.TimerService import TimerService
from Services.B24Service import B24Service
from Services.ReportService import ReportService

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
timer_service = TimerService()
report_service = ReportService()  # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∑–¥–µ—Å—å

def get_user_id(update: Update):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return update.effective_user.id

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = get_user_id(update)
    # –û—á–∏—â–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–Ω–æ–ø–∫–∏
    clear_result = timer_service.clear_all_timers(user_id)
    
    await update.message.reply_text(
        f"{clear_result}\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/new –Ω–∞–∑–≤–∞–Ω–∏–µ - —Å–æ–∑–¥–∞—Ç—å —Ç–∞–π–º–µ—Ä\n"
        "/plus –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∏–Ω—É—Ç—ã - –¥–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è\n" 
        "/stats –Ω–∞–∑–≤–∞–Ω–∏–µ - –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/delete –Ω–∞–∑–≤–∞–Ω–∏–µ - —É–¥–∞–ª–∏—Ç—å —Ç–∞–π–º–µ—Ä",
        reply_markup=timer_service.get_reply_keyboard(user_id)
    )

async def new_timer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = get_user_id(update)
    if not context.args or len(context.args) < 3:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, ID –∏ —Ç–∏–ø: /new \"–Ω–∞–∑–≤–∞–Ω–∏–µ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏\" id type")
        return
    
    try:
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ - —ç—Ç–æ ID –∏ type
        task_id = int(context.args[-2])
        task_type = int(context.args[-1])
        
        # –í—Å—ë —á—Ç–æ –º–µ–∂–¥—É "/new" –∏ ID - —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ
        key = ' '.join(context.args[:-2])
        
    except ValueError:
        await update.message.reply_text("ID –∏ type –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏")
        return
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞: {e}")
        return
    
    result = timer_service.create_timer(user_id, key, task_id, task_type)
    await update.message.reply_text(
        result,
        reply_markup=timer_service.get_reply_keyboard(user_id)
    )

async def plus_minutes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = get_user_id(update)
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /plus <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–º–∏–Ω—É—Ç—ã>")
        return
    
    try:
        timer_name = ' '.join(context.args[:-1])
        minutes = int(context.args[-1])
    except ValueError:
        await update.message.reply_text("–ú–∏–Ω—É—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    
    result = timer_service.add_minutes(user_id, timer_name, minutes)
    await update.message.reply_text(
        result,
        reply_markup=timer_service.get_reply_keyboard(user_id)
    )

async def detailed_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = get_user_id(update)
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: /stats –Ω–∞–∑–≤–∞–Ω–∏–µ")
        return
    
    timer_name = ' '.join(context.args)
    result = timer_service.get_detailed_statistics(user_id, timer_name)
    await update.message.reply_text(result)

async def delete_timer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = get_user_id(update)
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: /delete –Ω–∞–∑–≤–∞–Ω–∏–µ")
        return
    
    timer_name = ' '.join(context.args)
    result = timer_service.delete_timer(user_id, timer_name)
    await update.message.reply_text(
        result,
        reply_markup=timer_service.get_reply_keyboard(user_id)
    )

async def handle_all_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤ –∏ –∫–Ω–æ–ø–æ–∫"""
    user_id = get_user_id(update)
    user_message = update.message.text

    # 1. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ –¥–∏–∞–ª–æ–≥–µ —Å ReportService
    if context.user_data.get('awaiting_task_id'):
        await report_service.handle_task_id_response(update, context)
        return
        
    if context.user_data.get('awaiting_comment'):
        await report_service.handle_comment_response(update, context)
        return

    # 2. –ï—Å–ª–∏ –Ω–µ –≤ –¥–∏–∞–ª–æ–≥–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –∫–æ–º–∞–Ω–¥—ã
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    if user_message == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        stats = timer_service.get_statistics(user_id)
        await update.message.reply_text(
            stats,
            reply_markup=timer_service.get_reply_keyboard(user_id)
        )
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á—ë—Ç–∞
    if user_message == "–û—Ç—á—ë—Ç":
        result = await report_service.tracker_all_timer(user_id, update, context)
        if result != "DIALOG_STARTED":
            await update.message.reply_text(
                result,
                reply_markup=timer_service.get_reply_keyboard(user_id)
            )
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å—Ç–∞—Ä—Ç–∞ —Ç–∞–π–º–µ—Ä–æ–≤
    if user_message.startswith("‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç "):
        timer_name = user_message.replace("‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç ", "").strip()
        result = timer_service.start_timer(user_id, timer_name)
        await update.message.reply_text(
            result,
            reply_markup=timer_service.get_reply_keyboard(user_id)
        )
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º–µ—Ä–æ–≤  
    if user_message.startswith("‚èπÔ∏è –°—Ç–æ–ø "):
        timer_name = user_message.replace("‚èπÔ∏è –°—Ç–æ–ø ", "").strip()
        result = timer_service.stop_timer(user_id, timer_name)
        await update.message.reply_text(
            result,
            reply_markup=timer_service.get_reply_keyboard(user_id)
        )
        return
    
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ
    await update.message.reply_text(
        "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞",
        reply_markup=timer_service.get_reply_keyboard(user_id)
    )

def main():
    if not TOKEN:
        print("–û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        return
    
    app = Application.builder().token(TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("new", new_timer))
    app.add_handler(CommandHandler("plus", plus_minutes))
    app.add_handler(CommandHandler("stats", detailed_stats))
    app.add_handler(CommandHandler("delete", delete_timer))
    
    # –ï–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–Ω–æ–ø–æ–∫ –∏ –¥–∏–∞–ª–æ–≥–æ–≤)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_all_messages))
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã –ë–∏—Ç—Ä–∏–∫—Å–∞
    B24Service().refreshTokens()

if __name__ == "__main__":
    main()