import os
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from Services.TimerService import TimerService

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
timer_service = TimerService()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ DatabaseService
    # –û—á–∏—â–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã –∏ –∫–Ω–æ–ø–∫–∏
    clear_result = timer_service.clear_all_timers()
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö —Ç–∞–π–º–µ—Ä–æ–≤
    today_timers_count = len(timer_service.time_tracker)
    
    await update.message.reply_text(
        f"{clear_result}\n"
        f"üìÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–∞–π–º–µ—Ä–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {today_timers_count}\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/new –Ω–∞–∑–≤–∞–Ω–∏–µ - —Å–æ–∑–¥–∞—Ç—å —Ç–∞–π–º–µ—Ä\n"
        "/plus –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∏–Ω—É—Ç—ã - –¥–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è\n" 
        "/stats –Ω–∞–∑–≤–∞–Ω–∏–µ - –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/delete –Ω–∞–∑–≤–∞–Ω–∏–µ - —É–¥–∞–ª–∏—Ç—å —Ç–∞–π–º–µ—Ä",
        reply_markup=timer_service.get_reply_keyboard()
    )

async def new_timer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: /new –Ω–∞–∑–≤–∞–Ω–∏–µ")
        return
    
    key = ' '.join(context.args)
    result = timer_service.create_timer(key)
    await update.message.reply_text(
        result,
        reply_markup=timer_service.get_reply_keyboard()
    )

async def plus_minutes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /plus <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–º–∏–Ω—É—Ç—ã>")
        return
    
    try:
        timer_name = ' '.join(context.args[:-1])
        minutes = int(context.args[-1])
    except ValueError:
        await update.message.reply_text("–ú–∏–Ω—É—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    
    result = timer_service.add_minutes(timer_name, minutes)
    await update.message.reply_text(
        result,
        reply_markup=timer_service.get_reply_keyboard()
    )

async def detailed_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: /stats –Ω–∞–∑–≤–∞–Ω–∏–µ")
        return
    
    timer_name = ' '.join(context.args)
    result = timer_service.get_detailed_statistics(timer_name)
    await update.message.reply_text(result)

async def delete_timer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: /delete –Ω–∞–∑–≤–∞–Ω–∏–µ")
        return
    
    timer_name = ' '.join(context.args)
    result = timer_service.delete_timer(timer_name)
    await update.message.reply_text(
        result,
        reply_markup=timer_service.get_reply_keyboard()
    )

async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    if user_message == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        stats = timer_service.get_statistics()
        await update.message.reply_text(
            stats,
            reply_markup=timer_service.get_reply_keyboard()
        )
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Ç–∞–π–º–µ—Ä–æ–≤
    for timer_name in timer_service.time_tracker:
        if user_message == f"‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç {timer_name}":
            result = timer_service.start_timer(timer_name)
            await update.message.reply_text(
                result,
                reply_markup=timer_service.get_reply_keyboard()
            )
            return
            
        elif user_message == f"‚èπÔ∏è –°—Ç–æ–ø {timer_name}":
            result = timer_service.stop_timer(timer_name)
            await update.message.reply_text(
                result,
                reply_markup=timer_service.get_reply_keyboard()
            )
            return

def main():
    if not TOKEN:
        print("–û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        return
    
    app = Application.builder().token(TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("new", new_timer))
    app.add_handler(CommandHandler("plus", plus_minutes))
    app.add_handler(CommandHandler("stats", detailed_stats))
    app.add_handler(CommandHandler("delete", delete_timer))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_buttons))
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()